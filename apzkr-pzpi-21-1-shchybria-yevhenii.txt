Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук

Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для гейміфікації розробки програмного забезпечення

Студент гр. ПЗПІ-21-1		__________________ Щибря Є.С.
(підпис)
Керівник роботи 			__________________ доц. Лещинський В.О.
(підпис)

Роботу захищено «__»_________2024 р.
з оцінкою _________________________

Комісія: 				___________________ доц. Лещинський В.О.
(підпис)
___________________ доц. Лещинська І.О.
(підпис)
___________________ ст.викл. Сокорчук І.П.
(підпис)


Харків
2024 р.
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук	 Кафедра програмної інженерії		
Спеціальність 121 – Інженерія програмного забезпечення				
Курс 		3	 Семестр 			6						
Навчальна дисципліна Архітектура програмного забезпечення			

ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ

Щибрі Євгенію Сергійовичу				
1. Тема роботи: «Програмна система для гейміфікації розробки програмного забезпечення»											
2. Термін узгодження завдання курсової роботи «18» 	лютого	 2024 р.
3. Термін здачі студентом закінченої роботи «08» 	червня	 2024 р.
4. Вихідні дані до проекту (роботи): прототип проєкту, який включає в себе серверну частину, клієнтську частину, мобільний програмний застосунок, IoT або Smart Device програмний застосунок, з підтримкою програмних засобів адміністрування системи, забезпеченням захисту персональних даних												
5. Зміст пояснювальної записки (перелік питань, що належить розробити) вступ, аналіз предметної області, проектування програмного проекту, структура бази даних, кодування програмного проекту, опис розробленої програмної системи, висновки, перелік посилань, додатки					
6. Перелік графічного матеріалу з точним зазначенням обов’язкових креслень ER-модель даних, UML діаграма розгортання, UML діаграми пакетів, UML діаграма діяльності, UML діаграма взаємодії, користувацький інтерфейс клієнтської частини										


КАЛЕНДАРНИЙ ПЛАН

№	Назва етапів курсової роботи	Термін виконання етапів роботи	Примітка
1	Функціональна специфікація
програмного проекту	18.02.2024	
2	Проектування програмного
проекту	18.03.2024	
3	Кодування програмного проекту	18.04.2024	
4	Оформлення пояснювальної
записки	28.05.2024	
5	Захист курсової роботи	08.06.2024	


Дата видачі завдання «  18  »    лютого		2024 р.

Керівник 				______________ доц. Лещинський В.О.
(підпис)

Завдання прийняв до виконання
ст.гр. ПЗПІ-21-1			 _____________ 	       Щибря Є.С.
(підпис)
 
РЕФЕРАТ

Пояснювальна записка до курсової роботи:
АДМІНІСТРАТОР, ВМОТИВОВАНІСТЬ, ГЕЙМІФІКАЦІЯ, ДОСЯГНЕННЯ, МЕНЕДЖЕР, ПРОЄКТ, РОЗРОБНИК, РОЗРОБКА ПРОГРАМНОГО ЗАБЕЗПЕЧЕННЯ.

Об’єктом дослідження є індустрія розробки програмного забезпечення, в особливості проблема вмотивованості розробників та задоволення змістовності їх роботи, що впливає на якість розроблюваних ними програмних продуктів.
Метою курсової роботи є розробка системи, яка дозволяє гейміфікувати процес розробки програмного забезпечення шляхом введення системи очок до проєктів з розробки ПЗ та додавання досягнень до проєктів, і також містить основну функціональність систем управління проєктами, таку як створення та перегляд нових проєктів, додавання нових розробників до проєкту, створення та відстеження завдань, які стосуються проєкту.
Методи розробки серверної частини базуються на стандартних технологіях мови програмування Go та серверу бази даних PostgreSQL, веб-застосунок базується на технології React з використанням мови програмування JavaScript, кодову частину смарт-пристрою було розроблено за допомогою стандартних технологій мови програмування Go.
У результаті роботи було здійснено програмну реалізацію системи управління проєктами розробки програмного забезпечення з елементами гейміфікації. Програмна система складається з сервера, веб-застосунку та смарт-пристрою.
 
ЗМІСТ


Вступ	7
1 Специфікація ПЗ	8
1.1 Бізнес-вимоги	8
1.1.1 Бізнес-можливості	8
1.1.2 Бізнес-цілі та критерії успіху	10
1.1.3 Потреби клієнтів та ринку	11
1.1.4 Бізнес-ризики	11
1.2 Концепція рішення	12
1.2.1 Окреслення концепції	12
1.2.2 Головна функціональність	14
1.2.3 Припущення та залежності	15
1.3 Рамки та обмеження проєкту	16
1.3.1 Рамки первинного випуску	16
1.3.2 Рамки наступних випусків	19
1.3.3 Обмеження та винятки	19
1.4 Бізнес-контекст	20
1.4.1 Профілі зацікавлених сторін	20
1.4.2 Пріоритети проєкту	21
1.4.3 Робоче середовище	21
2 Програмна реалізація системи	23
2.1 Опис архітектури системи	23
2.2 Проєктування бази даних	24
2.2.1 Побудова ER-діаграми	24
2.2.2 Побудова логічної моделі бази даних	25
2.3 Архітектура серверної частини	26
2.4 Архітектура IoT частини	28
2.5 Архітектура клієнтської частини	30
3 Опис програмної системи	33
3.1 Завантаження і запуск	33
3.2 Опис програмної реалізації	34
Висновки	45
Перелік посилань	46
Додаток А Діаграма розгортання програмної системи	47
Додаток Б Програмний код серверної частини	48
Додаток В Програмний код IoT частини	55
Додаток Г Програмний код клієнтської частини	58


ВСТУП


Розробка програмного забезпечення, як і будь-яка тривала і інтелектуально вимоглива діяльність, може негативно позначитися на мотивації розробників. Це особливо актуально в конкретних областях програмної інженерії, таких як визначення вимог, проведення тестування програмного забезпечення, пошук і виправлення помилок, в яких творчий аспект програмування майже не проявляється. Залученість розробників значно погіршується, що потенційно впливає на якість їхньої роботи. Проєкти, над якими працюють демотивовані розробники, відзначаються великою кількістю помилок в коді через його низьку якість або відсутність тестування, постійними затримками термінів, невиконанням визначених вимог, низькою співпрацею між розробниками, конфліктами та стресом.
Однією з найбільш поширених технік підвищення мотивації працівників є гейміфікація, яка полягає у використанні ігрових елементів та технік ігрового дизайну у неігрових контекстах для залучення кінцевих користувачів до розв’язання проблем. Методи гейміфікації прагнуть залучити природні людські інстинкти, такі як досягнення, самовираження, конкуренція та інші для того, щоб підвищити внутрішню мотивацію людини. Незважаючи на відносно недавню популяризацію гейміфікації, було проведено велику кількість досліджень, спрямованих на її впровадження у різних галузях людської діяльності, які зазначають позитивний вплив гейміфікації на осіб та результати їхньої роботи, зокрема на підвищення внутрішньої мотивації та покращення командної роботи.
Головна мета проєкту полягає у створенні ефективної системі управління проєктами з елементами гейміфікації, яка спрямована на підвищення вмотивованості та покращення якості роботи розробників.
 
1 СПЕЦИФІКАЦІЯ ПЗ
1.1	Бізнес-вимоги
1.1.1	Бізнес-можливості


Впровадження методів гейміфікації в процеси роботи в різних галузях набирає велику популярність в останній час, і велика кількість платформ та програмних продуктів, які поширені в галузі розробки ПЗ та управління розробкою ПЗ, також застосовують деякі засоби гейміфікації або підтримують їх застосування:
1.	GitHub – популярний вебсервіс для хостингу репозиторіїв Git, підтримує деякі методи, які застосовуються при гейміфікації. Зокрема можна виділити можливість спільної роботи над репозиторіями з іншими користувачами і надання  зручної функціональності для спільної роботи і статистики щодо внесків різних користувачів у проєкт, що сприяє ефективній співпраці між робітниками, та різні індикатори прогресу, такі як візуалізація активності користувача на його профілі і значки, які надаються користувачеві за різні досягнення, що дозволяє користувачу візуалізувати свій прогрес та мотивує його до подальшої роботи. Хоча GitHub і має деякі елементи гейміфікації, він переважно спрямований на спільну роботу над кодом та управління версіями, тоді як наш концепт в основному зосереджений на гейміфікації розробки ПЗ та управління розробкою, включаючи задачі, планування, співпрацю та інше. Самі елементи, які пропонуються сервісом, доволі обмежені та спрямовані переважно до соціальної взаємодії, ніж до стимулювання розробників.
2.	Системи управління проєктами – популярні серед менеджерів інструменти управління проєктами, такі як Jira та Asana, хоча і майже не мають вбудованих засобів гейміфікації, проте вони дозволяють інтеграцію з різними плагінами та сервісами, спрямованими на підвищення залученості працівників під час роботи над проєктами. Дані сервіси можуть розширити функціональність систем управління проєктами, щоб включити в них різні засоби гейміфікації, такі як очки, таблиці лідерів, значки і досягнення та інші, які дозволяють користувачам відстежувати свій прогрес та змагатися з іншими користувачами, підвищуючи їх залучення. Також дані системи надають менеджерам налаштовувати робочі процеси та пристосовувати їх під свої потреби, що дозволяє вручну створювати ігровий досвід для робітників, наприклад за допомогою додання наративних елементів. Незважаючи на переваги застосування даних систем для гейміфікації процесів роботи, засоби гейміфікації цих систем є доволі загальними та поверхневими і можуть не підходити до потреб проєктів, які спрямовані саме на розробку програмного забезпечення. На противагу цьому, наш концепт зосереджений на потребах розробників ПЗ і буде мати функціонал гейміфікації, спрямований на задоволення даних потреб.
Беручи до уваги переваги та недоліки наведених вище систем, можемо виділити наступні відмінності нашого проєкту:
-	глибоке впровадження засобів гейміфікації в систему;
-	функціональність методів гейміфікації, зорієнтована на потреби розробників ПЗ та їх менеджерів;
-	гнучке налаштування функціоналу системи для пристосування під особливості команди чи проєкту;
-	можливість інтеграції з різними сервісами для розробників ПЗ, такими як системи контролю версій і т.д.
-	орієнтація на глобальний ринок шляхом локалізації та інтернаціоналізації системи для різних країн та мов.
Цільовими ринками даної системи є компанії або окремі команди, які спеціалізуються на розробці програмного забезпечення. Наш сервіс орієнтований переважно на команди малого або середнього розміру, але у процесі розробки системи та покращення функціоналу ми також будемо мати можливість орієнтуватися на великі компанії. Модель монетизації нашого продукту передбачає щомісячну або щорічну підписку користувачів на наш сервіс. Ціна підписки може змінюватися в залежності від розміру команди.


1.1.2	Бізнес-цілі та критерії успіху


BO-1: Залучення нових користувачів
Збільшити кількість команд розробників, які користуються нашою платформою.
BO-2: Утримання користувачів
Збільшити частку користувачів, які продовжать користуватися нашою платформою після її використання.
BO-3: Розширення ринку
Вийти на більший ринок за допомогою збільшення кількості клієнтів та покращення якості функціоналу системи та обслуговування.
SC-1: Підвищення доходу
Забезпечити приріст прибутку компанії на 40% протягом першого року впровадження системи.
SC-2: Утримання користувачів
Щонайменше 70% користувачів продовжать користуватися платформою після 6 місяців її використання.
SC-3: Розповсюдження продукту
Забезпечити впровадження даної платформи у щонайменше 30 різних командах розробників.


1.1.3	Потреби клієнтів та ринку


Цільові користувачі нашої платформи мають наступні потреби:
-	Підвищення моралі та залучення команди: повторювані завдання в розробці можуть призвести до нудьги і вигорання. Гейміфікація може додати веселі та дружні змагання, щоб зберегти мотивацію команд.
-	Підвищення ефективності розробників: гейміфікація може стимулювати розробників писати більш чистий код, брати більш активну участь в оглядах коду та виконувати завдання швидше та ефективніше;
-	Підвищення співпраці та комунікації: командні змагання та таблиці лідерів в гейміфікованій системі можуть покращити комунікацію та співпрацю між розробниками.
-	Налаштування та гнучкість: загальні підходи до гейміфікації можуть не підійти до всіх команд. Система повинна надавати можливість налаштування для пристосування сервісу до потреб команди та проєкту.
-	Зосередження на внутрішній мотивації: у той час як очки і значки можуть бути веселими, ідеальна гейміфікована система також повинна підтримувати почуття досягнення і задоволення для створення великого програмного забезпечення.


1.1.4	Бізнес-ризики


Під час розробки та підтримки наш проєкт може зіткнутися з наступними ризиками:
-	Конкуренція на ринку: існуючі системи управління проєктами містять в собі базові засоби гейміфікації. Окрім цього, на ринку є вже існуючі платформи гейміфікації. Для того, щоб виділитися на ринку, варто зосередитися на ключовій функціональності нашого проєкту – елементах гейміфікації, пов’язаних з розробкою ПЗ, та інтеграції з популярними інструментами розробки;
-	Прийнятність для користувачів: команди розробників можуть виявитися стійкими до змін або вважати гейміфікацію марною. Для подолання цього варто переконатися, що елементи гейміфікації добре розроблені і доповнюють, а не порушують процес розробки.
-	Проблеми реалізації: інтеграція з різними інструментами розробки може бути складною і трудомісткою. В такому випадку варто надати перевагу інтеграціям з найбільш популярними інструментами розробки, які надають змістовну документацію щодо інтеграції з іншими сервісами.
-	Негативний вплив на якість роботи: надмірно гейміфіковані системи можуть призвести до нездорової конкуренції або жертвувати якістю заради швидкості. Для зменшення цього ризику варто розробити завдання і нагороди, які заохочують до використання корисних практик програмування та співпраці та запропонувати варіанти налаштування платформи для задоволення різних динамік команди.


1.2	Концепція рішення
1.2.1	Окреслення концепції


Даний проєкт призначений допомогти командам розробників досягти якомога вищої якості процесів розробки та підвищити рівень їхньої залученості до своєї роботи за допомогою інтеграції методів гейміфікації в повсякденні процеси розробки, які призначені підвищити залученість та мотивацію користувачів, використовуючи природні прагнення людини до досягнень, співпраці, конкуренції і т.д.
Продукт пропонує командам розробників систему для гейміфікації процесів розробки ПЗ, яка матиме основний функціонал популярних систем управління проєктами, що дозволить легко інтегрувати систему в команди, які вже мають досвід роботи з подібними системами. На відміну від інших систем управління проєктами, наш продукт матиме функціонал, зосереджений на галузі розробки ПЗ, такий як завдання, пов’язані з повсякденними процесами розробки, такими як рефакторинг, виправлення помилок, тестування та інші, та інтеграція з популярними інструментами розробки, такими як онлайн-хостинг репозиторіїв GitHub та інші.
Доступ до системи буде здійснюватися за допомогою вебсайту або мобільного застосунку, які надаватимуть користувачам простий та інтуїтивний інтерфейс для взаємодії з системою. Веб-клієнт також матиме окремі панелі адміністратора для керівників команд та адміністраторів системи, які дозволять налаштовувати різні компоненти системи. Мобільний застосунок матиме систему оповіщень щодо нових завдань або інших подій, які відбулися в системі.
Продукт також включатиме в себе систему IoT пристроїв, яка включає в себе набір різних сенсорів, які будуть відслідковувати фізичний стан розробників та оточення, в якому вони працюють. Сенсори будуть відправляти отримані дані на сервер, після чого вони можуть застосовуватися керівником проєкту для аналізу стану працівників; самим розробникам можуть надаватися поради щодо покращення свого стану на основі отриманих даних.
Оскільки даний продукт матиме справу з розробкою програмних продуктів, які можуть містити вразливі дані або конфіденційну інформацію, особливу увагу варто приділити забезпеченню високої безпеки користувачів та їх даних. Для цього будуть застосовуватися наступні методи забезпечення безпеки:
-	використання надійних протоколів шифрування для передачі даних між сервером та іншими компонентами системи (веб-клієнт, мобільний застосунок та IoT пристрої);
-	надійні механізми автентифікації та авторизації для усунення доступу до конфіденційних даних стороннім та неавторизованим користувачам;
-	використання надійних систем збереження даних та дотримання вимог та практик забезпечення надійності збереження даних.
Впровадження даної системи сприятиме підвищенню якості розроблюваних програмних продуктів у компаніях-клієнтах та покращенню ставлення та залучення розробників до своєї роботи та команди. Поступове розповсюдження нашої платформи сприятиме покращенню процесів розробки по всьому світу та великій кількості якісних та надійних програмних продуктів, які виникнуть завдяки застосуванню даної системи при розробці.


1.2.2	Головна функціональність


MF-1: Створення завдань: Керівники проєктів можуть створювати завдання для розробників та включати різні деталі, такі як опис завдання, категорію, строк здачі та інше. Керівники також матимуть змогу призначати нагороди за виконання завдання, наприклад очки або значки.
MF-2: Створення нагород: Керівники проєктів можуть створювати різні нагороди за виконання завдань, такі як значки або досягнення. За бажанням керівники можуть використовувати стандартні нагороди і підлаштовувати їх під свої потреби, або імпортувати нагороди з інших проєктів.
MF-3: Інтеграція GitHub репозиторіїв: Керівники та розробники матимуть змогу додати репозиторій з програмним кодом проєкту до системи для того, щоб мати безпосередній доступ до даних репозиторію під час користування системою.
MF-4: Таблиця лідерів: Продукт матиме можливість показувати таблицю лідерів на основі набраних розробниками очок. За бажанням вона може бути відключена, якщо є потреба послабити конкуренцію в команді.
MF-5: Спостереження за фізичним станом працівників та їх оточенням: Продукт матиме систему IoT пристроїв, які призначені для спостереження за станом працівників та їх робочого середовища. Ці дані можуть бути використані для аналізу ситуації на даному етапі розробки або для надання порад розробникам щодо покращення їх стану. Даний функціонал можна відключити за бажанням, щоб не витрачати кошти на додаткові пристрої для системи.
MF-6: Профілі користувачів: Кожен користувач матиме змогу редагувати свій профіль та використовувати різні аватари та нагороди для підвищення самовираження розробників.
MF-7: Налаштування системи: Керівники матимуть змогу налаштовувати функціональність системи під потреби розробників або проєкту. Налаштування можуть включати в себе додання нових категорій завдань, зміну зовнішнього вигляду, додання або видалення певних засобів гейміфікації і т.д.


1.2.3	Припущення та залежності


П-1: Керівники проєктів зможуть самостійно використати можливості налаштування системи для того, щоб максимально відповідати вимогам своєї команди та проєктів.
П-2: Команда розробників буде готова прийняти нову систему управління проєктом, з якою вони ще не мали досвід роботи.
П-3: Користувачі розуміють головну мету гейміфікації, яка полягає в підвищенні внутрішньої мотивації користувача, а не в накопиченні нагород, і будуть здатні врахувати це при налаштуванні системи.
З-1: Постійна наявність Інтернет-з’єднання.
З-2: IoT пристрої мають бути правильно налаштованими для коректної передачі даних.


1.3	Рамки та обмеження проєкту
1.3.1	Рамки первинного випуску


Серверна частина повинна включати:
-	автентифікацію та авторизацію користувачів: реалізація системи користувачів з підтримкою ролей та прав доступу;
-	створення та редагування проєктів розробки: можливість створення та редагування інформації про проєкт та залучених в нього користувачів;
-	створення та редагування завдань: можливість створення та редагування інформації про завдання, пов’язані з певним проєктом;
-	створення та редагування нагород: можливість створення та редагування різних нагород за завдання;
-	створення та редагування профілів: можливість створення та редагування профілів користувачів з підтримкою налаштування їх зовнішнього вигляду;
-	налаштування функціональності проєкту: можливість налаштовувати окремі компоненти функціональності системи в окремому проєкті;
-	інтеграція зі сторонніми сервісами: можливість інтеграції з різними популярними інструментами розробки;
-	адміністрування системи: управління користувачами системи, управління даними системи, створення резервних копій налаштувань та даних, експорт та імпорт даних та налаштувань, управління сертифікатами;
-	шифрування даних: збереження конфіденційних даних у зашифрованому вигляді з використанням сучасних алгоритмів шифрування;
-	механізми резервного копіювання та відновлення даних: наявність автоматизованих механізмів резервного копіювання, які регулярно зберігатимуть копії даних.
Клієнтська частина повинна включати:
-	автентифікацію та авторизацію користувачів: реалізація системи користувачів з підтримкою ролей та прав доступу;
-	створення та редагування проєктів розробки: можливість створення та редагування інформації про проєкт та залучених в нього користувачів;
-	створення та редагування завдань: можливість створення та редагування інформації про завдання, пов’язані з певним проєктом;
-	створення та редагування нагород: можливість створення та редагування різних нагород за завдання;
-	створення та редагування профілів: можливість створення та редагування профілів користувачів з підтримкою налаштування їх зовнішнього вигляду;
-	налаштування функціональності проєкту: можливість налаштовувати окремі компоненти функціональності системи в окремому проєкті;
-	локалізацію та інтернаціоналізацію даних: підтримка різних кодових таблиць символів, обчислення та формати дати та часу, сортування текстових значень.


Мобільний застосунок повинен включати в себе:
-	автентифікацію та авторизацію користувачів: реалізація системи користувачів з підтримкою ролей та прав доступу;
-	створення та редагування проєктів розробки: можливість створення та редагування інформації про проєкт та залучених в нього користувачів;
-	створення та редагування завдань: можливість створення та редагування інформації про завдання, пов’язані з певним проєктом;
-	створення та редагування нагород: можливість створення та редагування різних нагород за завдання;
-	створення та редагування профілів: можливість створення та редагування профілів користувачів з підтримкою налаштування їх зовнішнього вигляду;
-	налаштування функціональності проєкту: можливість налаштовувати окремі компоненти функціональності системи в окремому проєкті;
-	локалізацію та інтернаціоналізацію даних: підтримка різних кодових таблиць символів, обчислення та формати дати та часу, сортування текстових значень.
-	систему оповіщень: можливість отримувати оповіщення з серверної частини про зміни у проєкті.
IoT частина повинна включати в себе:
-	збір та надсилання даних на сервер: дані з сенсорів збираються та надсилаються на серверну частину;
-	шифрування даних: перед надсиланням дані шифруються за допомогою надійних алгоритмів шифрування.


1.3.2	Рамки наступних випусків


Серверна частина може включати в себе:
-	детальну аналітику та статистику користувачів: можливість збирати більш детальні дані для кращого аналізу продуктивності команди;
-	інтеграцію з більшою кількістю сервісів розробки.
Клієнтська та мобільна частини можуть включати в себе:
-	надання технічної підтримки: можливість отримати підтримку щодо роботи системи від окремої команди надання підтримки;
-	інтерактивний туторіал: нові користувачі зможуть навчитися користуватися системою за допомогою інтерактивного керівництва.


1.3.3	Обмеження та винятки


О-1: Для доступу до серверу та бази даних всі інші пристрої повинні мати стабільне Інтернет-з’єднання.
О-2: Коректна робота системи залежить від стабільності API інтегрованих інструментів розробки.
В-1: Керівники проєктів мають самостійно налаштовувати систему від свої потреби.


1.4	Бізнес-контекст
1.4.1	Профілі зацікавлених сторін


Профілі зацікавлених сторін наведені в таблиці 1.1.

Таблиця 1.1 – Профілі зацікавлених сторін проєкту
Зацікавлена сторона	Головна цінність	Ставлення	Головний інтерес	Обмеження
Розробники програмного забезпечення	Покращення процесу розробки та якості коду	Можливе скептичне ставлення, оскільки система дає додаткове навантаження в процес роботи	Легкість користування системою, інтеграція з інструментами розробки	Необхідність навчання роботи з новою платформою
Менеджери проєктів розробки ПЗ	Покращення процесу розробки проєкту та моралі в команді	Зацікавленість в підвищенні якості роботи розробників	Підвищення мотивації розробників, функціонал управління проєктом	Необхідність навчання роботи з новою платформою
Власники компаній або команд розробки ПЗ	Підвищення виручки з надаваних продуктів або сервісів	Зацікавленість в підвищенні якості розроблюваних продуктів	Підвищення мотивації розробників	Обмеження в бюджеті, який вони готові виділити на дану систему
Розробники системи	Заробіток з продажу продукту, набування досвіду	Зацікавленість в розвитку продукту та його поширенні	Заробіток з продажу набутий досвід, репутація	Обмеження в часі, бюджеті та складі команди
	
	
1.4.2	Пріоритети проєкту


Основні пріоритети проєкту наведені в таблиці 1.2.

Таблиця 1.2 – Пріоритети проєкту
Показник	Виконання (етапи)	Обмеження (граничні значення)	Ступінь свободи (допустимий діапазон)
План робіт	продукт має бути випущеним до 10.06.2024		можливе відхилення від графіку на 2-4 тижні
Функціональність			в релізній версії буде
доступно не менше 85% заявленого функціоналу
Якість			швидкість обробки та оновлення даних не повинна перевищувати 5 секунд
Персонал		максимальний розмір команди – 1 розробник	
Ціна			допустиме перевищення бюджету на 15% без перегляду робіт


1.4.3	Робоче середовище


В якості мови програмування для розробки серверної частини проєкту було обрано Go. Дана мова програмування відома своєю швидкістю та ефективністю, тому використання добре підійде для розробки системи, яка буде зустрічатися з великою кількістю запитів від багатьох розробників. Також екосистема даної мови має багато бібліотек та фреймворків для створення серверних застосунків, які є ефективними та простими в користуванні.
В якості системи управління базами даних було обрано PostgreSQL. Дана СУБД відома своєю потужністю та можливістю розширення при збільшенні обсягу системи. Також PostgreSQL має вбудовані засоби захисту даних, які допоможуть нам зберігати конфіденційні дані в безпеці.
В якості технологій для розробки клієнтської частини буде використовуватися бібліотека React та фреймворк Next.js. Дане сполучення є досить розповсюдженим у сфері розробки вебзастосунків через можливість швидкої розробки інтерфейсів за допомогою компонентів. React має велику екосистему бібліотек та фреймворків, одним з яких є Next.js, який ще більше підвищує якість застосунку за допомогою вбудованих за замовчуванням функцій, потрібних розробнику вебзастосунків, таких як програмування на стороні сервера, вбудовані засоби маршрутизації та інші.
Для розробки мобільного застосунку буде використовуватися мова програмування C# з технологією MAUI. Дана технологія дозволяє створювати версії застосунку для операційних систем Android та iOS одночасно на основі єдиної кодової бази, що зменшує час та кошти, витрачені на розробку мобільних застосунків.
Для розробки IoT частини системи буде використано засоби мови програмування Go, яка є популярним вибором для програмування під смарт-пристрої завдяки своїй швидкості та відносно невисокого споживання ресурсів. При передачі даних з датчиків на сервер будуть використовуватися надійні методи шифрування.
 
2 ПРОГРАМНА РЕАЛІЗАЦІЯ СИСТЕМИ
2.1	Опис архітектури системи

Архітектура розроблюваної програмної системи побудована за принципом дворівневої  клієнт-серверної архітектури, яка ділиться на наступні логічні рівні:
1.	Рівень управління даними – відповідає за збереження бази даних та доступу до неї;
2.	Прикладний рівень – відповідає за реалізацію основної логіки застосунку та необхідну обробку інформації;
3.	Рівень представлення даних – являє собою інтерфейс користувача і відповідає за представлення даних користувачеві і введення від нього керуючих команд.
Програмна система передбачатиме взаємодію клієнтського та серверного програмних модулів за моделлю тонкого клієнта: сервер відповідатиме за логіку застосунку та збереження даних, а клієнтська частина забезпечуватиме лише функції рівня представлення.
На основі описаної архітектури системи було побудовано діаграму розгортання (див. рис. А.1). Система складається з 5 компонентів: серверна частина, сервер з базою даних, клієнтська частина, мобільний застосунок та IoT-застосунок. Серверна частина складається з веб-серверу та бази даних, які розгортатимуться на одній машині для покращення передачі даних між ними. Веб-клієнт, мобільний застосунок та IoT пристрій є клієнтськими частинами, які взаємодіють з серверною частиною за допомогою протоколу HTTP.







2.2	Проєктування бази даних
2.2.1	Побудова ER-діаграми


Для проєктування бази даних було розроблено ER-модель даних (див. рис. 2.1), яка складається з 7 сутностей: користувач, компанія, проєкт, задача,  нагорода, пристрій та вимірювання.

 
Рисунок 2.1 – ER-діаграма за нотацією Чена

Дані сутності мають наступні зв’язки:
•	компанія-проєкт – один-до-багатьох;
•	компанія-користувач – один-до-багатьох;
•	проєкт-задача – один-до-багатьох;
•	проєкт-нагорода – один-до-багатьох;
•	проєкт-користувач – багато-до-багатьох;
•	користувач-задача – один-до-багатьох;
•	користувач-нагорода – багато-до-багатьох;
•	користувач-пристрій – один-до-багатьох;
•	пристрій-вимірювання – один-до-багатьох.


2.2.2	Побудова логічної моделі бази даних


На основі сутностей та зв’язків ER-діаграми, створеної в розділі 2.2.2, було побудовано схему реляційної бази даних (див. рис. 2.2).

 
Рисунок 2.2 – Схема реляційної бази даних

Дана схема, на відміну від ER-моделі, включає в себе додаткові 6 таблиць, які відповідають за забезпечення зв’язків «багато-до-багатьох» та за приведення таблиць бази даних до 3 нормальної форми.

 2.3 Архітектура серверної частини


Архітектура серверної частини програмної системи побудована за принципами Clean Architecture, яка забезпечує гнучкість та легкість розширення кодової бази шляхом розділення коду на наступні шари (див. рис. 2.3):
1.	Domain – містить у собі класи сутностей та моделей, над якими виконуються операції в застосунку, та оголошення інтерфейсів для взаємодії з базою даних.
2.	Usecases – містить у собі основну бізнес-логіку застосунку, побудовану на основі сутностей та інтерфейсів шару Domain.
3.	Infrastructure – відповідає за імплементацію інтерфейсів Domain шару та взаємодію зі сторонніми базами даних або сервісами.
4.	Handlers – відповідає за взаємодію з клієнтами.
Рівні Domain та Application не залежать від інших рівнів, що дозволяє абстрагувати бізнес-логіку від технічних деталей застосунку і за необхідності замінити програмну реалізацію даних шарів. 

 
Рисунок 2.3 – Архітектура серверної частини
Для розробки серверної частини було обрано мову програмування Go, яка широко зарекомендувала себе в сфері розробки веб-серверів завдяки своїй ефективності та швидкості, що є важливими факторами при створенні високопродуктивних веб-серверів. Також Go має потужну стандартну бібліотеку, яка включає в себе пакет “net/http”, що спеціально розроблений для створення HTTP-серверів. Цей пакет надає все необхідне для створення сервера, включаючи обробку запитів і відповідей, маршрутизацію та обробку файлів.
В якості СУБД для серверної частини було обрано PostgreSQL, яка є одним з найпопулярніших систем управління базами даних завдяки ефективного масштабування та високої надійності збереження даних.
При розробці серверної частини було виділено декілька модулів, з яких складається серверна частина, в тому числі й основний модуль рішення. На основі цих модулів було розроблено діаграму пакетів, представлену на рисунку 2.4.

 
Рисунок 2.4 – Діаграма пакетів

Модулі domain, usecases, handles та insfrastructure представляють собою шари архітектури проєкту і містять в собі відповідний код; модуль server відповідає за роботу та налаштування веб-серверу. Інші модулі є сторонніми пакетами і відповідають за наступну функціональність:
•	chi – маршрутизатор для полегшення створення HTTP-сервісів за допомогою засобів стандартної бібліотеки Go;
•	pgx – драйвер та інструменти для роботи з СУБД PostgreSQL;
•	viper – управління та налаштування конфігурації проєкту;
•	jwt-go – робота з JSON веб-токенами;
•	pg-commands – інтерфейс для програмної взаємодії з командами PostgreSQL; використовується в серверній частині для експорту даних.
Приклади програмного коду серверної частини наведені в додатку Б.


2.4	Архітектура IoT частини


Архітектура розробленої IoT-частини складається з чотирьох рівнів: Device, Network, Management та Application. Дані рівні відповідальні за наступні складові системи:
1.	Device – відповідає за фізичні пристрої IoT-частини, такі як сенсори;
2.	Network – відповідає за передачу даних, зібраних з рівню Device, до інших частин системи та серверів для обробки та аналізу;
3.	Management – відповідає за керування IoT-системи, включаючи налаштування системи та з’єднання до мережі;
4.	Application – відповідає за обробку та аналіз даних, зібраних з пристроїв, та взаємодію з іншими частинами програмної системи.
Дана чотирирівнева архітектура дозволяє розділити код на незалежні модулі, що зменшує рівень залежності між ними та призводить до високої гнучкості та масштабованості коду.
Для розробки IoT частини системи було також використано мову програмування Go, яка успішно використовується в програмуванні пристроїв завдяки своїй ефективності, швидкості та малому споживанні ресурсів.

Для демонстрації життєвого циклу роботи IoT-частини системи, було побудовано UML-діаграму взаємодії (див. рис. 2.5).


 
Рисунок 2.5 – UML-діаграма взаємодії IoT-частини

Після початку роботи пристрій намагається налаштувати з’єднання із сервером. Якщо користувач ще не під’єднав пристрій до системи, з’єднання не зможе бути налаштовано. Після успішного з’єднання пристрій почне збирати дані, оброблювати їх та надсилати на сервер, доки не трапиться помилка або доки пристрій не буде відключено. На основі моделі взаємодії IoT частини було побудовано UML-діаграму діяльності для відображення взаємодії пристрою з сервером (див. рис. 2.6).

 
Рисунок 2.6 - UML-діаграма діяльності IoT частини

Після реєстрації пристрою в системі та успішного з’єднання пристрій почне збирати дані, оброблювати їх та надсилати на сервер, доки не трапиться помилка або доки пристрій не буде відключено.
Приклади програмного коду IoT частини наведені в додатку Б.


2.5	Архітектура клієнтської частини


Клієнтська частина розроблюваної системи розроблена за принципами архітектури Single-Page Application (SPA) для динамічної зміни вмісту сторінки за допомогою запитів до серверу. Дана архітектура дозволяє швидко переходити на різні сторінки та отримувати оновлені дані без завантаження додаткових сторінок.
Для полегшення масштабування клієнтської частини, різні компоненти та файли організовані за наступними директоріями:
•	/components – папка для компонентів інтерфейсу, призначених для багаторазового використання або інкапсуляції певної функціональності;
•	/routes – папка для компонентів, які застосовуються при маршрутизації в застосунку (сторінки, спільні інтерфейси і т.д.);
•	/services – папка для функцій, відповідальних за обробку даних та взаємодію з сервером;
•	/context – папка для контекстів, які зберігають глобальні дані застосунку;
•	/adapting – папка для коду та файлів, які відповідають за підтримку локалізації та інтернаціоналізації в застосунку.
Для розробки клієнтської частини було використано бібліотеку React для мови програмування JavaScript, яка спеціалізується в розробці веб-застосунків з архітектурою SPA. Дана бібліотека також забезпечує високу зручність та швидкість розробки завдяки інтуїтивному підходу до розробки додатків за допомогою окремих компонентів.
При розробці клієнтської частини було розроблено діаграму пакетів, яку наведено на рисунку 2.7:

 
Рисунок 2.7 – Діаграма пакетів клієнтської частини
Модулі components, routes, services, context та adapting є папками, які використовуються для описаної вище організації коду проєкту. Інші модулі є сторонніми бібліотеками, які використовуються в наступних цілях:
•	react – основна бібліотека клієнтської частини, на якій побудовано веб-застосунок;
•	react-router-dom – бібліотека, яка використовується для реактивної маршрутизації в веб-застосунку;
•	i18n – бібліотека, яка дозволяє реалізувати багатомовний інтерфейс в застосунку;
•	material-ui – бібліотека, яка надає набір готових стилізованих компонентів для полегшення розробки користувацького інтерфейсу;
•	tailwindcss – бібліотека, яка надає набір готових класів CSS, які дозволяють швидко стилізувати компоненти за потреби.
Приклади програмного коду клієнтської частини наведені в додатку Г.
 
3 ОПИС ПРОГРАМНОЇ СИСТЕМИ
3.1	Завантаження і запуск


Для запуску будь-якої з частин програмної системи потрібно завантажити архів з вихідним кодом частин системи та розархівувати його в будь-якій папці, після чого перейти до директорії частини, яку треба запустити. Для успішної роботи системи на робочій машині повинні бути встановлені СУБД PostgreSQL версії щонайменше 14.1, середовище виконання Go версії щонайменше 1.21.4 та середовище виконання Node.js версії щонайменше 20.10.0.
Для запуску серверної частини потрібно забезпечити з’єднання з базою даних PostgreSQL. Для цього треба мати запущений сервер PostgreSQL, на якому розміщується база даних, з якою повинна працювати серверна частина. В файлі конфігурації під назвою config.yaml потрібно змінити налаштування бази даних на інформацію, необхідну для з’єднання із запущеною базою даних (див. рис. 3.1).

 
Рисунок 3.1 – Налаштування з’єднання до бази даних

Після успішного налаштування бази даних потрібно перейти до директорії, в якій знаходиться головний файл серверної частини (main.go) та виконати команду “go run main.go” в терміналі цієї директорії. В разі успішного запуску в терміналі з’явиться повідомлення про успішний запуск веб-серверу (див. рис. 3.2).

 
Рисунок 3.2 – Запуск серверної частини системи

Для успішного запуску IoT частини системи потрібно запустити серверну частину за інструкцією, вказаною вище. Для того, щоб запустити IoT частину, достатньо просто перейти в директорію з головним файлом IoT частини та виконати команду “go run main.go” в терміналі цієї директорії. В разі успішного запуску програма запитає дані користувача і почне з’єднання із сервером.
Для успішного запуску клієнтської частини спочатку потрібно встановити всі необхідні пакети та бібліотеки, необхідні для роботи веб-застосунку. Для цього треба перейти в директорію клієнтської частини і в терміналі директорії прописати команду “npm install”, після чого дочекатися успішного встановлення всіх пакетів. Також потрібно переконатися в тому, що серверна частина успішно запущена і готова до з’єднання. Для запуску клієнтської частині в тій же директорії прописуємо команду “npm start”, після чого повинно запуститися вікно браузеру з робочим веб-додатком.


3.2	Опис програмної реалізації


При першому запуску веб-застосунка користувач потрапляє на головну сторінку неаутентифікованого користувача, з якої можна тільки перейти до сторінок реєстрації та входу в систему (див. рис. 3.3).

 
Рисунок 3.3 – Головна сторінка неаутентифікованого користувача

Також у користувача є можливість змінити мову застосунку за допомогою кнопки поряд з кнопками логіну та реєстрації (див. рис. 3.4).

 
Рисунок 3.4 – Зміна мови інтерфейсу застосунку

Користувач може перейти до сторінки реєстрації, якщо він не має зареєстрованого в системі акаунту, або перейти до сторінки входу в систему (див. рис. 3.5-3.6).

 
Рисунок 3.5 – Сторінка реєстрації
 
Рисунок 3.6 – Сторінка входу в систему

У разі входу в ролі адміністратора, користувач бачить на головній сторінці профіль адміністратора та доступні для нього дії (див. рис. 3.7).

 
Рисунок 3.7 – Головна сторінка адміністратора

При натисканні на кнопку «Експорт даних» починається завантаження резервної копії бази даних на комп’ютер користувача (див. рис. 3.8).

 
Рисунок 3.8 – Експорт даних

При натисканні на кнопку «Компанії» користувач переходить до сторінки компаній, де він може переглядати доступні компанії, зареєстровані в системі, та здійснювати такі дії, як додавання, редагування або видалення компаній (див. рис. 3.9-3.10).
 
Рисунок 3.9 – Перегляд існуючих компаній

 
Рисунок 3.10 – Форма створення та редагування компанії

Далі розглянемо можливості менеджера. При вході в систему в ролі менеджера користувача зустрічає подібна головна сторінка з іншим набором доступних дій (див. рис. 3.11).

 
Рисунок 3.11 – Головна сторінка менеджера

При натисканні на кнопку «Проєкти» користувач потрапляє на сторінку проєктів, де він може переглядати та здійснювати різні дії над проєктами (див. рис. 3.12-3.13).

 
Рисунок 3.12 – Сторінка проєктів менеджера

 
Рисунок 3.13 – Форма створення та редагування проєктів


При натисканні на картку проєкту, користувач переходить на сторінку проєкту, де він може переглянути більш детальну інформацію про проєкт, а саме його завдання, розробники та нагороди (див. рис. 3.14).

 
Рисунок 3.14 – Сторінка проєкту

На вкладці із завданнями користувач може переглядати завдання проєкту та здійснювати різні дії над ними, а також дивитися деталі окремого завдання (див. рис. 3.15-3.16).

 
Рисунок 3.15 – Форма редагування та створення завдання
 
Рисунок 3.16 – Детальна інформація щодо завдання

На вкладці з розробниками користувач може переглядати розробників проєкту, додавати або видаляти їх, та видавати їм досягнення (див. рис. 3.17-3.19).

 
Рисунок 3.17 – Вкладка з розробниками проєкту

 
Рисунок 3.18 – Додавання розробників до проєкту

 
Рисунок 3.19 – Видача досягнень розробнику

На вкладці з досягненнями користувач може переглядати досягнення даного проєкту та здійснювати різні дії над ними (див. рис. 3.20-3.21).

 
Рисунок 3.20 – Вкладка з досягненнями
 
Рисунок 3.21 – Форма створення та редагування досягнень

Нарешті, розглянемо можливості розробника. При вході у систему в ролі менеджера користувач бачить головну сторінку розробника (див. рис. 3.22). Вона відрізняється від попередніх головних сторінок наявністю додаткової інформації, такої як список досягнень розробника та показники з його пристроїв.

 
Рисунок 3.22 – Головна сторінка розробника

Як і менеджеру, користувачу в ролі розробника також доступний перегляд проєктів, в яких він бере участь, та перегляд окремих проєктів (див. рис. 3.23-3.26). Дані сторінки та вкладки майже ідентичні вище наведеним, однак розробник не може редагувати дані стосовно проєктів; в нього є лише можливість взаємодіяти із завданнями проєкту (приймати та завершувати їх).

 
Рисунок 3.23 – Перегляд проєктів розробника

 
Рисунок 3.24 – Головна сторінка проєкту розробника

 
Рисунок 3.25 – Вкладка з розробниками (з боку розробника)

 
Рисунок 3.26 – Вкладка з досягненнями (з боку розробника)

Таким чином, було продемонстровано функціональні можливості клієнтської частини. Демонстрація роботи програмної системи доступна за наступним посиланням: https://www.youtube.com/watch?v=Ggg5WR4ScH0
 
ВИСНОВКИ


У результаті виконання курсового проєкту було розроблено  програмну систему для гейміфікації розробки програмного забезпечення. Під час розробки проєкту було проведено аналіз предметної області, проєктування архітектури системи та схеми бази даних, та реалізацію програмної системи за допомогою засобів мови програмування Go та бібліотеки React для мови програмування JavaScript.
Розроблена програмна система дозволяє менеджерам проєктів з розробки ПЗ гейміфікувати процес розробки шляхом введення системи очок до проєктів з розробки ПЗ та додавання досягнень до проєктів, надаючи при цьому основну функціональність систем управління проєктами, таку як створення та перегляд нових проєктів, додавання нових розробників до проєкту, створення та відстеження завдань, які стосуються проєкту. Також в системі наявні засоби адміністрування та управління даними, такі як експорт даних.
 
ПЕРЕЛІК ПОСИЛАНЬ


1.	Tommaso Dal Sasso, Andrea Mocci, Michele Lanza, Ebrisa Mastrodicasa. How to Gamify Software Engineering//Faculty of Informatics — University of Lugano, Switzerland. 2017.
2.	Klaas-Jan Stol, Mario Schaarshcmidt, Shelly Goldblit. Klaas-Jan Stol, Mario Schaarshcmidt, Shelly Goldblit. Gamification in software engineering: the mediating role of developer engagement and job satisfaction//Empir Software Eng. 2021.
3.	Documentation – The Go Programming Language. URL: https://go.dev/doc/ (дата звернення: 07.06.2024).
4.	React Reference Overview – React. URL: https://react.dev/reference/react (дата звернення: 07.06.2024).
5.	Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. – Addison-Wesley Professional, 1994. – 416 с.